esphome:
  on_boot:
    priority: -200
    then:
      - delay: 5s
      - logger.log: "Enabling UART target output for beta functionality"
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - logger.log: "UART target output enabled automatically"

uart:
  id: uart_bus
  tx_pin: GPIO13
  rx_pin: GPIO14
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
      delimiter: "*\r\n"
    sequence:
        - lambda: |-
            UARTDebug::log_string(direction, bytes);

            const int max_targets = 4;
            static float t_distance[max_targets] = {0.0};
            static float t_snr[max_targets] = {0.0};
            static bool t_active[max_targets] = {false};

            std::string line(bytes.begin(), bytes.end());

            if (line.substr(0, 6) == "$JYRPO") {
                size_t pos = 0;
                std::vector<std::string> v;
                std::string token;
                std::string s = line.substr(7);

                while ((pos = s.find(",")) != std::string::npos) {
                    token = s.substr(0, pos);
                    v.push_back(token);
                    s.erase(0, pos + 1);
                }
                v.push_back(s);

                int target_count = atoi(v[0].c_str());
                int target_index = atoi(v[1].c_str()) - 1;
                float target_distance_val = atof(v[2].c_str());
                float target_snr_val = atof(v[4].c_str());

                ESP_LOGD("UART", "Target Count: %d, Target Index: %d", target_count, target_index);

                if (id(last_target_count) != target_count) {
                    // Reset all targets to inactive
                    for (int i = 0; i < max_targets; i++) {
                        t_active[i] = false;
                        t_distance[i] = 0.0;
                        t_snr[i] = 0.0;
                    }
                    id(last_target_count) = target_count;
                }

                if (target_index < max_targets) {
                    t_distance[target_index] = target_distance_val;
                    t_snr[target_index] = target_snr_val;
                    t_active[target_index] = true;
                }

                if (target_index == target_count - 1) {
                    id(target_distance_1_m).publish_state(t_distance[0]);
                    id(target_1_snr).publish_state(t_snr[0]);
                    id(target_1_active).publish_state(t_active[0]);

                    id(target_distance_2_m).publish_state(t_distance[1]);
                    id(target_2_snr).publish_state(t_snr[1]);
                    id(target_2_active).publish_state(t_active[1]);

                    id(target_distance_3_m).publish_state(t_distance[2]);
                    id(target_3_snr).publish_state(t_snr[2]);
                    id(target_3_active).publish_state(t_active[2]);

                    id(target_distance_4_m).publish_state(t_distance[3]);
                    id(target_4_snr).publish_state(t_snr[3]);
                    id(target_4_active).publish_state(t_active[3]);
                }
            }

number:
  - platform: template
    id: mmwave_zone_1_start
    name: mmWave Zone 1 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: False
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_1_end
    name: mmWave Zone 1 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 315
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: False
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_2_start
    name: mmWave Zone 2 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"
    
  - platform: template
    id: mmwave_zone_2_end
    name: mmWave Zone 2 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"
    
  - platform: template
    id: mmwave_zone_3_start
    name: mmWave Zone 3 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_3_end
    name: mmWave Zone 3 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_4_start
    name: mmWave Zone 4 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_4_end
    name: mmWave Zone 4 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

sensor:
  - platform: template
    name: Target 1 Distance # Don't change
    id: target_distance_1_m
    accuracy_decimals: 2
    disabled_by_default: false
    device_class: distance
    unit_of_measurement: "m"
  - platform: template
    name: Target 2 Distance # Don't change
    id: target_distance_2_m
    accuracy_decimals: 2
    disabled_by_default: True
    device_class: distance
    unit_of_measurement: "m"
  - platform: template
    name: Target 3 Distance # Don't change
    id: target_distance_3_m
    accuracy_decimals: 2
    disabled_by_default: True
    device_class: distance
    unit_of_measurement: "m"
  - platform: template
    name: Target 4 Distance # Don't change
    id: target_distance_4_m
    accuracy_decimals: 2
    disabled_by_default: True
    device_class: distance
    unit_of_measurement: "m"
  - platform: template
    name: "Target 1 SNR" # Don't change
    disabled_by_default: True
    id: target_1_snr
  - platform: template
    name: "Target 2 SNR" # Don't change
    disabled_by_default: True
    id: target_2_snr
  - platform: template
    name: "Target 3 SNR" # Don't change
    disabled_by_default: True
    id: target_3_snr
  - platform: template
    name: "Target 4 SNR" # Don't change
    disabled_by_default: True
    id: target_4_snr

binary_sensor:
  - platform: gpio
    name: mmWave
    id: mmwave
    device_class: occupancy
    pin:
      number: GPIO15
      mode: INPUT_PULLDOWN
    on_release: 
      then:
        - binary_sensor.template.publish:
            id: target_1_active
            state: off
        - binary_sensor.template.publish:
            id: target_2_active
            state: off
        - binary_sensor.template.publish:
            id: target_3_active
            state: off
        - binary_sensor.template.publish:
            id: target_4_active
            state: off
        - sensor.template.publish:
            id: target_distance_1_m
            state: 0.00
        - sensor.template.publish:
            id: target_distance_2_m
            state: 0.00
        - sensor.template.publish:
            id: target_distance_3_m
            state: 0.00
        - sensor.template.publish:
            id: target_distance_4_m
            state: 0.00
        - sensor.template.publish:
            id: target_1_snr
            state: 0
        - sensor.template.publish:
            id: target_2_snr
            state: 0
        - sensor.template.publish:
            id: target_3_snr
            state: 0
        - sensor.template.publish:
            id: target_4_snr
            state: 0
  - platform: template
    name: "Target 1 Active" # Don't change
    disabled_by_default: False
    id: target_1_active
  - platform: template
    name: "Target 2 Active" # Don't change
    disabled_by_default: True
    id: target_2_active
  - platform: template
    name: "Target 3 Active" # Don't change
    disabled_by_default: True
    id: target_3_active
  - platform: template
    name: "Target 4 Active" # Don't change
    disabled_by_default: True
    id: target_4_active

globals:
  - id: last_target_count
    type: int
    restore_value: no
    initial_value: '0'

switch:
  - platform: template
    name: UART target output
    id: uart_target_output
    entity_category: config
    internal: ${uart_target_output_disabled}
    optimistic: true
    assumed_state: false
    restore_mode: DISABLED
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

button:
  - platform: template
    name: mmWave Set Distance
    id: mmwave_set_distance
    icon: "mdi:arrow-left-right"
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          int s1 = (int)ceil(id(mmwave_zone_1_start).state / 15.0);
          int e1 = (int)ceil(id(mmwave_zone_1_end).state / 15.0);
          int s2 = (int)ceil(id(mmwave_zone_2_start).state / 15.0);
          int e2 = (int)ceil(id(mmwave_zone_2_end).state / 15.0);
          int s3 = (int)ceil(id(mmwave_zone_3_start).state / 15.0);
          int e3 = (int)ceil(id(mmwave_zone_3_end).state / 15.0);
          int s4 = (int)ceil(id(mmwave_zone_4_start).state / 15.0);
          int e4 = (int)ceil(id(mmwave_zone_4_end).state / 15.0);

          std::string cmd = "detRangeCfg -1";

          if(s1 < e1) {
            cmd += " " + to_string(s1) + " " + to_string(e1);
          }
          if(s2 > e1 && s2 < e2) {
            cmd += " " + to_string(s2) + " " + to_string(e2);
          }
          if(s3 > e2 && s3 < e3) {
            cmd += " " + to_string(s3) + " " + to_string(e3);
          }
          if(s4 > e3 && s4 < e4) {
            cmd += " " + to_string(s4) + " " + to_string(e4);
          }
          
          if(cmd != "detRangeCfg -1") {
            std::vector<unsigned char> cmd_vec(cmd.begin(), cmd.end());
            ESP_LOGI("set_mmwave_distance", "Sending command to sensor %s", cmd.c_str());
            id(distance_zone_status).publish_state("Successfully sent to sensor! " + cmd.substr(14));
            return cmd_vec;
          } else {
            ESP_LOGE("set_mmwave_distance", "No valid segments configured. Please adjust the sliders.");
            id(distance_zone_status).publish_state("No valid segments configured. Please adjust the sliders.");
            return std::vector<unsigned char>();
          }
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

text_sensor:
  - platform: template
    name: "Distance Zones Status"
    id: "distance_zone_status"

