binary_sensor: 
  - platform: gpio
    name: mmWave
    id: mmwave
    device_class: occupancy
    pin:
      number: GPIO17
      mode: INPUT_PULLDOWN

uart:
  id: uart_bus
  tx_pin: GPIO14
  rx_pin: GPIO13
  baud_rate: 9600
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);
          
          // Only process incoming data
          if (direction == UART_DIRECTION_RX) {
            std::string data = "";
            for (int i = 0; i < bytes.size(); i++) {
              data += char(bytes[i]);
            }
            
            // Parse presence detection data: $DFHPD,1,,,*
            if (data.find("$DFHPD") == 0) {
              size_t comma1 = data.find(',', 6);
              if (comma1 != std::string::npos) {
                std::string presence_str = data.substr(comma1 + 1, 1);
                if (presence_str == "1") {
                  id(mmwave).publish_state(true);
                } else if (presence_str == "0") {
                  id(mmwave).publish_state(false);
                }
              }
            }
            
            // Parse distance and speed data: $DFDMD,target_count,target_number,distance,speed,energy,,*
            if (data.find("$DFDMD") == 0) {
              // Throttling for distance/speed updates
              static uint32_t last_distance_update = 0;
              uint32_t now = millis();
              
              // Get throttle interval from user setting
              uint32_t throttle_interval = 400; // Default 0.4s
              if (id(mmwave_update_rate).state == "0.3s") {
                throttle_interval = 300;
              } else if (id(mmwave_update_rate).state == "0.4s") {
                throttle_interval = 400;
              } else if (id(mmwave_update_rate).state == "0.5s") {
                throttle_interval = 500;
              }
              
              std::vector<std::string> parts;
              std::string current = "";
              
              for (char c : data) {
                if (c == ',') {
                  parts.push_back(current);
                  current = "";
                } else {
                  current += c;
                }
              }
              parts.push_back(current); // Add last part
              
              if (parts.size() >= 6) {
                // Target count - always update for binary sensor
                int target_count = 0;
                if (parts[1].length() > 0 && parts[1] != " ") {
                  target_count = atoi(parts[1].c_str());
                }
                
                // Update mmWave binary sensor based on target count when in distance mode
                if (id(mmwave_mode).state == "Distance and Speed") {
                  id(mmwave).publish_state(target_count > 0);
                }
                
                // Throttle distance/speed sensor updates
                if (now - last_distance_update >= throttle_interval) {
                  last_distance_update = now;
                  
                  // Target count
                  id(mmwave_target_count).publish_state(target_count);
                  
                  // Distance (parts[3])
                  if (parts[3].length() > 0 && parts[3] != " ") {
                    float distance = atof(parts[3].c_str());
                    id(mmwave_target_distance).publish_state(distance);
                  } else {
                    id(mmwave_target_distance).publish_state(NAN);
                  }
                  
                  // Speed (parts[4])
                  if (parts[4].length() > 0 && parts[4] != " ") {
                    float speed = atof(parts[4].c_str());
                    id(mmwave_target_speed).publish_state(speed);
                  } else {
                    id(mmwave_target_speed).publish_state(NAN);
                  }
                  
                  // Energy (parts[5])
                  if (parts[5].length() > 0 && parts[5] != " " && parts[5].find('*') == std::string::npos) {
                    int energy = atoi(parts[5].c_str());
                    id(mmwave_target_energy).publish_state(energy);
                  } else {
                    id(mmwave_target_energy).publish_state(NAN);
                  }
                }
              }
            }
          }

# New: Distance and speed sensors for tracking mode
sensor:
  - platform: template
    name: "mmWave Target Distance"
    id: mmwave_target_distance
    unit_of_measurement: "m"
    accuracy_decimals: 2
    device_class: distance
    state_class: measurement
    disabled_by_default: true
    entity_category: diagnostic
    
  - platform: template
    name: "mmWave Target Speed"
    id: mmwave_target_speed
    unit_of_measurement: "m/s"
    accuracy_decimals: 2
    state_class: measurement
    disabled_by_default: true
    entity_category: diagnostic
    
  - platform: template
    name: "mmWave Target Energy"
    id: mmwave_target_energy
    accuracy_decimals: 0
    state_class: measurement
    disabled_by_default: true
    entity_category: diagnostic

  - platform: template
    name: "mmWave Target Count"
    id: mmwave_target_count
    accuracy_decimals: 0
    state_class: measurement
    disabled_by_default: true
    entity_category: diagnostic

# Mode selection dropdown
select:
  - platform: template
    name: "mmWave Mode"
    id: mmwave_mode
    entity_category: config
    icon: mdi:radar
    optimistic: true
    disabled_by_default: true
    options:
      - "Presence Detection"
      - "Distance and Speed"
    initial_option: "Presence Detection"
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - if:
          condition:
            lambda: 'return x == "Distance and Speed";'
          then:
            - uart.write: "setRunApp 1"  # Switch to distance & speed mode
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor
            - delay: 2s
            # Enable target output for distance/speed data
            - switch.turn_on: uart_target_output
          else:
            - uart.write: "setRunApp 0"  # Switch to presence detection mode
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor
            - delay: 2s
            # Disable target output
            - switch.turn_off: uart_target_output

  - platform: template
    name: "Distance/Speed Update Rate"
    id: mmwave_update_rate
    entity_category: config
    icon: mdi:timer
    optimistic: true
    disabled_by_default: true
    options:
      - "0.3s"
      - "0.4s" 
      - "0.5s"
    initial_option: "0.5s"
    restore_value: true

light:
  - platform: binary
    name: mmWave LED
    restore_mode: RESTORE_DEFAULT_OFF
    output: mmwave_led_output
    entity_category: config
    disabled_by_default: False

output:
  - platform: template
    id: mmwave_led_output
    type: binary
    write_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - if:
          condition:
            lambda: !lambda return state;
          then:
            - uart.write: "setLedMode 1 0"
          else:
            - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

switch:
  - platform: template
    name: mmWave sensor
    id: mmwave_sensor
    disabled_by_default: True
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: UART presence output
    id: uart_presence_output
    entity_category: config
    disabled_by_default: true
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: UART target output
    id: uart_target_output
    entity_category: config
    disabled_by_default: true
    optimistic: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor



  # New: Micro-motion Detection Toggle (Distance mode only)
  - platform: template
    name: "Micro-motion Detection"
    id: micro_motion_detection
    entity_category: config
    icon: mdi:motion-sensor
    optimistic: true
    disabled_by_default: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Distance and Speed";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write: "setMicroMotion 1"
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor
    turn_off_action:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Distance and Speed";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write: "setMicroMotion 0"
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor

number:
  - platform: template
    id: mmwave_distance_min
    name: mmWave Minimum Distance
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0.6
    max_value: 25
    initial_value: 0.6
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
  - platform: template
    id: mmwave_distance_max
    name: mmWave Max Distance
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 12
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider

  - platform: template
    name: mmWave off latency
    icon: mdi:clock-end
    entity_category: config
    id: mmwave_off_latency
    min_value: 1
    max_value: 600
    initial_value: 15
    optimistic: true
    step: 5
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Presence Detection";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write: !lambda |-
                std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
                return std::vector<unsigned char>(mss.begin(), mss.end());
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmWave on latency
    icon: mdi:clock-start
    id: mmwave_on_latency
    entity_category: config
    min_value: 0
    max_value: 2
    initial_value: 0
    optimistic: true
    step: 0.25
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Presence Detection";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write: !lambda |-
                std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
                return std::vector<unsigned char>(mss.begin(), mss.end());
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmWave Trigger Distance
    icon: mdi:radar
    id: mmwave_trigger_distance
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 6
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
    set_action:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Presence Detection";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write: !lambda |-
                std::string mss = "setTrigRange " + to_string(x);
                return std::vector<unsigned char>(mss.begin(), mss.end());
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmWave Sustain Sensitivity
    icon: mdi:target-variant
    id: mmwave_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true

  - platform: template
    name: mmWave Trigger Sensitivity
    icon: mdi:target-variant
    id: mmwave_trigger_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 5
    optimistic: true
    step: 1
    restore_value: true

  # New: Threshold Factor for Distance/Speed Mode
  - platform: template
    name: "mmWave Threshold Factor"
    id: mmwave_threshold_factor
    entity_category: config
    icon: mdi:tune-variant
    disabled_by_default: true
    min_value: 1
    max_value: 20
    initial_value: 5
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Distance and Speed";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write: !lambda |-
                std::string mss = "setThrFactor " + to_string((int)x);
                return std::vector<unsigned char>(mss.begin(), mss.end());
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor



button:
  - platform: template
    name: "Set Distance"
    id: set_distance
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string ms = "setRange " + to_string(id(mmwave_distance_min).state) + " " + to_string(id(mmwave_distance_max).state);
          return std::vector<unsigned char>(ms.begin(), ms.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor
 
  - platform: template
    name: "Set Sensitivity"
    id: set_sensitivity
    entity_category: config
    on_press:
      - if:
          condition:
            lambda: 'return id(mmwave_mode).state == "Presence Detection";'
          then:
            - switch.turn_off: mmwave_sensor
            - delay: 1s
            - uart.write:
                !lambda std::string mss = "setSensitivity " + to_string(id(mmwave_sensitivity).state) + " " + to_string(id(mmwave_trigger_sensitivity).state);
                return std::vector<unsigned char>(mss.begin(), mss.end());
            - delay: 1s
            - uart.write: "saveConfig"
            - delay: 1s
            - switch.turn_on: mmwave_sensor


  - platform: template
    name: Restart mmWave Sensor
    id: restart_mmwave
    entity_category: config
    internal: true
    on_press:
      - uart.write: "resetSystem"
  - platform: template
    name: Factory Reset mmWave
    icon: mdi:cog-counterclockwise
    id: factory_reset_mmwave
    disabled_by_default: true
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor






